{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"msiem(1) \u00b6 Manual msiem Synopsis \u00b6 msiem [-h] [-V] {config,alarms,esm,ds,events,wl,api} ... Description \u00b6 McAfee SIEM Command Line Interface 0.3.4 License: MIT Credits: Andy Walden, Tristan Landes Run `msiem <command> --help` for more information about a sub-command. Options \u00b6 Sub-commands msiem config Set and print your msiempy config. msiem alarms Query alarms with alarms and events based regex filters. Print, acknowledge, unacknowledge and delete alarms. msiem esm Show ESM version and misc informations regarding your ESM. msiem ds Add datasources from CSV or INI files, list, search, remove. msiem events Query events with any simple filter. Add a note to events. msiem wl Manage watchlists. Export, import values. msiem api Quickly make API requests to any enpoints with any data. Options 'msiem config' \u00b6 usage: msiem config [-h] [--print] [--set '<section>' ['<option>' '<value>'] ['<section>' ['<option>' '<value>'] ...]] Set and print your msiempy config. Set your ESM hostname/user/password interactively: $ msiem confi --set esm Set the general config verbose/quiet/logfile/timeout/ssl_verify interactively: $ msiem config --set general Enable quiet mode (no infos or warnings): $ msiem config --set general quiet true --set general verbose false --print Print configuration fields, password base 64 truncated from the output. --set '<section>' ['<option>' '<value>'] ['<section>' ['<option>' '<value>'] ...] Set the config option to the specified value if passed (can be repeated), OR inveractively prompt for specified configuration section: 'esm' or 'general'. Options 'msiem alarms' \u00b6 usage: msiem alarms [-h] [--action action] [--force] [--time_range time_range] [--start_time time] [--end_time time] [--status status] [--filters '<field>=<regex>' ['<field>=<regex>' ...]] [--event_filters '<field>=<regex>' ['<field>=<regex>' ...]] [--alarms_fields list of fields [list of fields ...]] [--events_fields list of fields [list of fields ...]] [--json] [--page_size page_size] [--pages pages] [--no_events] [--query_events] Query alarms with alarms and events based regex filters. Print, acknowledge, unacknowledge and delete alarms. Exemples: Acknowledges the (unacknowledged) alarms triggered in the last 3 days that mention \"HTTP: SQL Injection Attempt Detected\" in the triggered event name and destinated to 10.55.16.99 : $ msiem alarms --action acknowledge -t LAST_24_HOURS --status unacknowledged --filters \"ruleName=HTTP: SQL Injection Attempt Detected\" \"destIp=10.55.16.99\" Save the current day alarms as JSON: $ msiem alarms -t CURRENT_DAY --no_events --json --action action What to do with the alarms, if not specified will print only. Chose from 'acknowledge','unacknowledge','delete' --force Will not prompt for confirmation to do the specified action --time_range time_range, -t time_range Timerange, choose from CUSTOM, LAST_MINUTE, LAST_10_MINUTES, LAST_30_MINUTES, LAST_HOUR, CURRENT_DAY, PREVIOUS_DAY, LAST_24_HOURS, LAST_2_DAYS, LAST_3_DAYS, CURRENT_WEEK, PREVIOUS_WEEK, CURRENT_MONTH, PREVIOUS_MONTH, CURRENT_QUARTER, PREVIOUS_QUARTER, CURRENT_YEAR, PREVIOUS_YEAR --start_time time, --t1 time Start trigger date --end_time time, --t2 time End trigger date --status status Status of the alarm. Chose from 'acknowledged','unacknowledged','all' --filters '<field>=<regex>' ['<field>=<regex>' ...], -f '<field>=<regex>' ['<field>=<regex>' ...] List of alarm related field/matchvalue filters. Repeatable. Alarm related fields can be : id, summary, assignee, severity, triggeredDate, acknowledgedDate, acknowledgedUsername, alarmName, events, and others --event_filters '<field>=<regex>' ['<field>=<regex>' ...], -e '<field>=<regex>' ['<field>=<regex>' ...] List of triggering event related field/matchvalue filters. Repeatable. Event related fields can be : ruleName, srcIp, destIp, protocol, lastTime, subtype, destPort, destMac, srcMac, srcPort, deviceName, sigId, normId, srcUser, destUser, normMessage, normDesc, host, domain, ipsId, etc... Or (if --query_events) : Rule.msg, Alert.SrcPort, Alert.DstPort, Alert.SrcIP, Alert.DstIP, Alert.SrcMac, Alert.DstMac, Alert.LastTime, Rule.NormID, Alert.DSIDSigID, Alert.IPSIDAlertID, etc... --alarms_fields list of fields [list of fields ...] List of fields that appear in the alarm table. Overwritten by --json --events_fields list of fields [list of fields ...] List of fields that appear in the events sub tables. Default value: ['ruleName', 'srcIp', 'destIp']. If you use --query_events, this list will be used to query needed values, you must specify all fields you want to filter on with ewvent_filters. Default value if --query_events: ['Rule.msg', 'SrcIP', 'DstIP']. Overwritten by --json. --json Prints only a JSON object to STDOUT output. --page_size page_size, -p page_size Size of requests --pages pages, -n pages Number of alarm pages to load --no_events Do not load the complete trigerring events informations. On SIEM v11.x, still load the events infos from notifyGetTriggeredNotification. (Else events field is a string). --query_events Use the query module to retreive events, much more effcient. Event keys will be like 'Alert.SrcIP' instead of 'srcIp' Options 'msiem esm' \u00b6 usage: msiem esm [-h] [--version] [--time] [--disks] [--ram] [--callhome] [--status] [--timezones] Show ESM version and misc informations regarding your ESM. --version Show ESM version --time time (GMT) --disks disk status --ram ram status --callhome True/False if callhome is active/not active --status Statuses and a few other less interesting details : autoBackupEnabled, autoBackupDay, backupLastTime, backupNextTime, rulesAndSoftwareCheckEnabled, rulesAndSoftLastCheck, rulesAndSoftNextCheck --timezones Current ESM timezone Options 'msiem ds' \u00b6 usage: msiem ds [-h] [-a <file or folder>] [-s [term]] [-l] [--delete <datasource ID> [<datasource ID> ...]] [--deleteclients <datasource ID> [<datasource ID> ...]] [--force] Add datasources from CSV or INI files, list, search, remove. INI format: Single datasource per file. [datasource] # name of datasource (required) name=testing_datasource # ip of datasource (ip or hostname required) ds_ip=10.10.1.34 # hostname of te new datasource hostname= # type of datasource (required) type_id=65 # id of parent device (required) parent_id=144116287587483648 # True value designate a client datasource client= CSV Format: Multiple datasources per file name,ds_ip,hostname,type_id,parent_id,client Test_ds_1,10.10.1.41,datasource11.domain.com,65,144116287587483648, Test_ds_2,10.10.1.42,datasource12.domain.com,65,144116287587483648, Test_ds_3,10.10.1.43,datasource13.domain.com,65,144116287587483648, Add Datasources with: $ msiem ds --add \"File or folder\" -a <file or folder>, --add <file or folder> Scan a directory or a file for new Datasource files and add them to the ESM. Datasources can be defined in CSV or INI format (see README.md). -s [term], --search [term] Search for datasource name, hostname, or IP.May require quotes around the name if thereare spaces. -l , --list Display datasources. --delete <datasource ID> [<datasource ID> ...], --remove <datasource ID> [<datasource ID> ...] Deletes the datasource and all the data. Be careful. --deleteclients <datasource ID> [<datasource ID> ...] Deletes the datasource's clients and all the data. Be careful. --force Do not ask the user input before deletion of the datasources / datasources client. Options 'msiem events' \u00b6 usage: msiem events [-h] [--time_range time_range] [--start_time <time>] [--end_time <time>] [--filters <filter> [<filter> ...]] [--fields <field> [<field> ...]] [--json] [--limit <int>] [--max <int>] [--grouped] [--add_note <file or text>] [--listfields] [--listfilters] Query events with filters, add note to events. With simple filters: $ msiem events --filters DstIP=127.0.0.1 SrcIP=22.0.0.0/8 --fields SrcIP DstIP Query events with pecific operatior and multiple values filters (filters are ANDed together inside a group filter). Print the results as JSON. $ msiem events --filter SrcIP IN 22.0.0.0/8 10.0.0.0/8 --filter DSIDSigID IN 49190-4294967295 --fields SrcIP DstIP Rule.msg DSIDSigID --json --time_range time_range, -t time_range Timerange, choose from CUSTOM, LAST_MINUTE, LAST_10_MINUTES, LAST_30_MINUTES, LAST_HOUR, CURRENT_DAY, PREVIOUS_DAY, LAST_24_HOURS, LAST_2_DAYS, LAST_3_DAYS, CURRENT_WEEK, PREVIOUS_WEEK, CURRENT_MONTH, PREVIOUS_MONTH, CURRENT_QUARTER, PREVIOUS_QUARTER, CURRENT_YEAR, PREVIOUS_YEAR --start_time <time>, --t1 <time> Start trigger date --end_time <time>, --t2 <time> End trigger date --filters <filter> [<filter> ...], -f <filter> [<filter> ...] List of Event field/value filters: '<field>=<value>' or '<field>' '<operator>' '<value1>' '<value2>...'. Repeatable. Will generate only EsmBasicValue filters. Filter fields can be: Rule.msg, Alert.SrcPort, Alert.DstPort, Alert.SrcIP, Alert.DstIP, Alert.SrcMac, Alert.DstMac, Alert.LastTime, Rule.NormID, Alert.DSIDSigID, Alert.IPSIDAlertID, etc... --fields <field> [<field> ...] List of fields that appear in the events table. Default value: ['Rule.msg', 'SrcIP', 'DstIP']. --json Prints only a JSON object to STDOUT output. --limit <int> Size of requests --max <int>, --max_query_depth <int> Maximum number of reccursive time based divisions the loading process can apply to the query in order to load all events --grouped Indicate a grouped events query, a IPSID filter must be provided and only one field value is accepted. --add_note <file or text> Add a note to the events matching the filters. --listfields List all possible fields names --listfilters List all possible fields names usable in filters Options 'msiem wl' \u00b6 usage: msiem wl [-h] [-l] [-t] [-e <wl_name>] [--add <wl_name> <wl_type> <wl_name> <wl_type>] [--delete <wl ID>] [-a <wl_name> <file or values>... [<wl_name> <file or values>... ...]] [--rmvalues <wl_name> <file or values>... [<wl_name> <file or values>... ...]] [--json] Watchlist operations. -l , --list List the ESM watchlists and exit. -t , --types List all possible watchlists types and exit. -e <wl_name>, --values <wl_name> List watchlist values and exit. Redirect STDOUT to file to export data. --add <wl_name> <wl_type> <wl_name> <wl_type> NotImplemented. Create a static watchlist. --delete <wl ID>, --remove <wl ID> NotImplemented. Deletes a Watchlist -a <wl_name> <file or values>... [<wl_name> <file or values>... ...], --addvalues <wl_name> <file or values>... [<wl_name> <file or values>... ...] NotImplemented. Add values to a static watchlist. --rmvalues <wl_name> <file or values>... [<wl_name> <file or values>... ...] NotImplemented. Remove watchlist values from the watchlist. --json NotImplemented. Prints only a JSON object to STDOUT output. Options 'msiem api' \u00b6 usage: msiem api [-h] [-m <method>] [-d <JSON string or file>] [-a <key>=<value> [<key>=<value> ...]] [-l] Quickly make API requests to any enpoints with any data. Print resposne to sdtout as JSON. Request v2/alarmGetTriggeredAlarms: $ msiem api --method \"v2/alarmGetTriggeredAlarms?triggeredTimeRange=LAST_24_HOURS&status=&pageSize=500&pageNumber=1\" -m <method>, --method <method> SIEM API method name or NitroSession.PARAMS keyword. Exemple: 'v2/qryGetSelectFields' or 'get_possible_fields', see 'msiem api --list' for full details . -d <JSON string or file>, --data <JSON string or file> POST data, in the case of a API method name call. See the SIEM API docs for full details. -a <key>=<value> [<key>=<value> ...], --args <key>=<value> [<key>=<value> ...] Interpolation parameters, in the case of a NitroSession.PARAMS keyword call. See 'msiem api --list' for full details. -l , --list List all available SIEM API calls as well as all supported calls with keywords and parameter mapping. All upper cases method names signals to use the private API methods. -V , --version Show version and exit Authors \u00b6 msiem was written by Andy Walden, Tristan Landes <<<UNSET --author_email OPTION>>>. Distribution \u00b6 The latest version of msiem may be downloaded from GitHub","title":"msiem(1)"},{"location":"#msiem1","text":"Manual msiem","title":"msiem(1)"},{"location":"#synopsis","text":"msiem [-h] [-V] {config,alarms,esm,ds,events,wl,api} ...","title":"Synopsis"},{"location":"#description","text":"McAfee SIEM Command Line Interface 0.3.4 License: MIT Credits: Andy Walden, Tristan Landes Run `msiem <command> --help` for more information about a sub-command.","title":"Description"},{"location":"#options","text":"Sub-commands msiem config Set and print your msiempy config. msiem alarms Query alarms with alarms and events based regex filters. Print, acknowledge, unacknowledge and delete alarms. msiem esm Show ESM version and misc informations regarding your ESM. msiem ds Add datasources from CSV or INI files, list, search, remove. msiem events Query events with any simple filter. Add a note to events. msiem wl Manage watchlists. Export, import values. msiem api Quickly make API requests to any enpoints with any data.","title":"Options"},{"location":"#options_msiem_config","text":"usage: msiem config [-h] [--print] [--set '<section>' ['<option>' '<value>'] ['<section>' ['<option>' '<value>'] ...]] Set and print your msiempy config. Set your ESM hostname/user/password interactively: $ msiem confi --set esm Set the general config verbose/quiet/logfile/timeout/ssl_verify interactively: $ msiem config --set general Enable quiet mode (no infos or warnings): $ msiem config --set general quiet true --set general verbose false --print Print configuration fields, password base 64 truncated from the output. --set '<section>' ['<option>' '<value>'] ['<section>' ['<option>' '<value>'] ...] Set the config option to the specified value if passed (can be repeated), OR inveractively prompt for specified configuration section: 'esm' or 'general'.","title":"Options 'msiem config'"},{"location":"#options_msiem_alarms","text":"usage: msiem alarms [-h] [--action action] [--force] [--time_range time_range] [--start_time time] [--end_time time] [--status status] [--filters '<field>=<regex>' ['<field>=<regex>' ...]] [--event_filters '<field>=<regex>' ['<field>=<regex>' ...]] [--alarms_fields list of fields [list of fields ...]] [--events_fields list of fields [list of fields ...]] [--json] [--page_size page_size] [--pages pages] [--no_events] [--query_events] Query alarms with alarms and events based regex filters. Print, acknowledge, unacknowledge and delete alarms. Exemples: Acknowledges the (unacknowledged) alarms triggered in the last 3 days that mention \"HTTP: SQL Injection Attempt Detected\" in the triggered event name and destinated to 10.55.16.99 : $ msiem alarms --action acknowledge -t LAST_24_HOURS --status unacknowledged --filters \"ruleName=HTTP: SQL Injection Attempt Detected\" \"destIp=10.55.16.99\" Save the current day alarms as JSON: $ msiem alarms -t CURRENT_DAY --no_events --json --action action What to do with the alarms, if not specified will print only. Chose from 'acknowledge','unacknowledge','delete' --force Will not prompt for confirmation to do the specified action --time_range time_range, -t time_range Timerange, choose from CUSTOM, LAST_MINUTE, LAST_10_MINUTES, LAST_30_MINUTES, LAST_HOUR, CURRENT_DAY, PREVIOUS_DAY, LAST_24_HOURS, LAST_2_DAYS, LAST_3_DAYS, CURRENT_WEEK, PREVIOUS_WEEK, CURRENT_MONTH, PREVIOUS_MONTH, CURRENT_QUARTER, PREVIOUS_QUARTER, CURRENT_YEAR, PREVIOUS_YEAR --start_time time, --t1 time Start trigger date --end_time time, --t2 time End trigger date --status status Status of the alarm. Chose from 'acknowledged','unacknowledged','all' --filters '<field>=<regex>' ['<field>=<regex>' ...], -f '<field>=<regex>' ['<field>=<regex>' ...] List of alarm related field/matchvalue filters. Repeatable. Alarm related fields can be : id, summary, assignee, severity, triggeredDate, acknowledgedDate, acknowledgedUsername, alarmName, events, and others --event_filters '<field>=<regex>' ['<field>=<regex>' ...], -e '<field>=<regex>' ['<field>=<regex>' ...] List of triggering event related field/matchvalue filters. Repeatable. Event related fields can be : ruleName, srcIp, destIp, protocol, lastTime, subtype, destPort, destMac, srcMac, srcPort, deviceName, sigId, normId, srcUser, destUser, normMessage, normDesc, host, domain, ipsId, etc... Or (if --query_events) : Rule.msg, Alert.SrcPort, Alert.DstPort, Alert.SrcIP, Alert.DstIP, Alert.SrcMac, Alert.DstMac, Alert.LastTime, Rule.NormID, Alert.DSIDSigID, Alert.IPSIDAlertID, etc... --alarms_fields list of fields [list of fields ...] List of fields that appear in the alarm table. Overwritten by --json --events_fields list of fields [list of fields ...] List of fields that appear in the events sub tables. Default value: ['ruleName', 'srcIp', 'destIp']. If you use --query_events, this list will be used to query needed values, you must specify all fields you want to filter on with ewvent_filters. Default value if --query_events: ['Rule.msg', 'SrcIP', 'DstIP']. Overwritten by --json. --json Prints only a JSON object to STDOUT output. --page_size page_size, -p page_size Size of requests --pages pages, -n pages Number of alarm pages to load --no_events Do not load the complete trigerring events informations. On SIEM v11.x, still load the events infos from notifyGetTriggeredNotification. (Else events field is a string). --query_events Use the query module to retreive events, much more effcient. Event keys will be like 'Alert.SrcIP' instead of 'srcIp'","title":"Options 'msiem alarms'"},{"location":"#options_msiem_esm","text":"usage: msiem esm [-h] [--version] [--time] [--disks] [--ram] [--callhome] [--status] [--timezones] Show ESM version and misc informations regarding your ESM. --version Show ESM version --time time (GMT) --disks disk status --ram ram status --callhome True/False if callhome is active/not active --status Statuses and a few other less interesting details : autoBackupEnabled, autoBackupDay, backupLastTime, backupNextTime, rulesAndSoftwareCheckEnabled, rulesAndSoftLastCheck, rulesAndSoftNextCheck --timezones Current ESM timezone","title":"Options 'msiem esm'"},{"location":"#options_msiem_ds","text":"usage: msiem ds [-h] [-a <file or folder>] [-s [term]] [-l] [--delete <datasource ID> [<datasource ID> ...]] [--deleteclients <datasource ID> [<datasource ID> ...]] [--force] Add datasources from CSV or INI files, list, search, remove. INI format: Single datasource per file. [datasource] # name of datasource (required) name=testing_datasource # ip of datasource (ip or hostname required) ds_ip=10.10.1.34 # hostname of te new datasource hostname= # type of datasource (required) type_id=65 # id of parent device (required) parent_id=144116287587483648 # True value designate a client datasource client= CSV Format: Multiple datasources per file name,ds_ip,hostname,type_id,parent_id,client Test_ds_1,10.10.1.41,datasource11.domain.com,65,144116287587483648, Test_ds_2,10.10.1.42,datasource12.domain.com,65,144116287587483648, Test_ds_3,10.10.1.43,datasource13.domain.com,65,144116287587483648, Add Datasources with: $ msiem ds --add \"File or folder\" -a <file or folder>, --add <file or folder> Scan a directory or a file for new Datasource files and add them to the ESM. Datasources can be defined in CSV or INI format (see README.md). -s [term], --search [term] Search for datasource name, hostname, or IP.May require quotes around the name if thereare spaces. -l , --list Display datasources. --delete <datasource ID> [<datasource ID> ...], --remove <datasource ID> [<datasource ID> ...] Deletes the datasource and all the data. Be careful. --deleteclients <datasource ID> [<datasource ID> ...] Deletes the datasource's clients and all the data. Be careful. --force Do not ask the user input before deletion of the datasources / datasources client.","title":"Options 'msiem ds'"},{"location":"#options_msiem_events","text":"usage: msiem events [-h] [--time_range time_range] [--start_time <time>] [--end_time <time>] [--filters <filter> [<filter> ...]] [--fields <field> [<field> ...]] [--json] [--limit <int>] [--max <int>] [--grouped] [--add_note <file or text>] [--listfields] [--listfilters] Query events with filters, add note to events. With simple filters: $ msiem events --filters DstIP=127.0.0.1 SrcIP=22.0.0.0/8 --fields SrcIP DstIP Query events with pecific operatior and multiple values filters (filters are ANDed together inside a group filter). Print the results as JSON. $ msiem events --filter SrcIP IN 22.0.0.0/8 10.0.0.0/8 --filter DSIDSigID IN 49190-4294967295 --fields SrcIP DstIP Rule.msg DSIDSigID --json --time_range time_range, -t time_range Timerange, choose from CUSTOM, LAST_MINUTE, LAST_10_MINUTES, LAST_30_MINUTES, LAST_HOUR, CURRENT_DAY, PREVIOUS_DAY, LAST_24_HOURS, LAST_2_DAYS, LAST_3_DAYS, CURRENT_WEEK, PREVIOUS_WEEK, CURRENT_MONTH, PREVIOUS_MONTH, CURRENT_QUARTER, PREVIOUS_QUARTER, CURRENT_YEAR, PREVIOUS_YEAR --start_time <time>, --t1 <time> Start trigger date --end_time <time>, --t2 <time> End trigger date --filters <filter> [<filter> ...], -f <filter> [<filter> ...] List of Event field/value filters: '<field>=<value>' or '<field>' '<operator>' '<value1>' '<value2>...'. Repeatable. Will generate only EsmBasicValue filters. Filter fields can be: Rule.msg, Alert.SrcPort, Alert.DstPort, Alert.SrcIP, Alert.DstIP, Alert.SrcMac, Alert.DstMac, Alert.LastTime, Rule.NormID, Alert.DSIDSigID, Alert.IPSIDAlertID, etc... --fields <field> [<field> ...] List of fields that appear in the events table. Default value: ['Rule.msg', 'SrcIP', 'DstIP']. --json Prints only a JSON object to STDOUT output. --limit <int> Size of requests --max <int>, --max_query_depth <int> Maximum number of reccursive time based divisions the loading process can apply to the query in order to load all events --grouped Indicate a grouped events query, a IPSID filter must be provided and only one field value is accepted. --add_note <file or text> Add a note to the events matching the filters. --listfields List all possible fields names --listfilters List all possible fields names usable in filters","title":"Options 'msiem events'"},{"location":"#options_msiem_wl","text":"usage: msiem wl [-h] [-l] [-t] [-e <wl_name>] [--add <wl_name> <wl_type> <wl_name> <wl_type>] [--delete <wl ID>] [-a <wl_name> <file or values>... [<wl_name> <file or values>... ...]] [--rmvalues <wl_name> <file or values>... [<wl_name> <file or values>... ...]] [--json] Watchlist operations. -l , --list List the ESM watchlists and exit. -t , --types List all possible watchlists types and exit. -e <wl_name>, --values <wl_name> List watchlist values and exit. Redirect STDOUT to file to export data. --add <wl_name> <wl_type> <wl_name> <wl_type> NotImplemented. Create a static watchlist. --delete <wl ID>, --remove <wl ID> NotImplemented. Deletes a Watchlist -a <wl_name> <file or values>... [<wl_name> <file or values>... ...], --addvalues <wl_name> <file or values>... [<wl_name> <file or values>... ...] NotImplemented. Add values to a static watchlist. --rmvalues <wl_name> <file or values>... [<wl_name> <file or values>... ...] NotImplemented. Remove watchlist values from the watchlist. --json NotImplemented. Prints only a JSON object to STDOUT output.","title":"Options 'msiem wl'"},{"location":"#options_msiem_api","text":"usage: msiem api [-h] [-m <method>] [-d <JSON string or file>] [-a <key>=<value> [<key>=<value> ...]] [-l] Quickly make API requests to any enpoints with any data. Print resposne to sdtout as JSON. Request v2/alarmGetTriggeredAlarms: $ msiem api --method \"v2/alarmGetTriggeredAlarms?triggeredTimeRange=LAST_24_HOURS&status=&pageSize=500&pageNumber=1\" -m <method>, --method <method> SIEM API method name or NitroSession.PARAMS keyword. Exemple: 'v2/qryGetSelectFields' or 'get_possible_fields', see 'msiem api --list' for full details . -d <JSON string or file>, --data <JSON string or file> POST data, in the case of a API method name call. See the SIEM API docs for full details. -a <key>=<value> [<key>=<value> ...], --args <key>=<value> [<key>=<value> ...] Interpolation parameters, in the case of a NitroSession.PARAMS keyword call. See 'msiem api --list' for full details. -l , --list List all available SIEM API calls as well as all supported calls with keywords and parameter mapping. All upper cases method names signals to use the private API methods. -V , --version Show version and exit","title":"Options 'msiem api'"},{"location":"#authors","text":"msiem was written by Andy Walden, Tristan Landes <<<UNSET --author_email OPTION>>>.","title":"Authors"},{"location":"#distribution","text":"The latest version of msiem may be downloaded from GitHub","title":"Distribution"}]}
{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"msiempy 0.3.6.dev2 This is an autogenerated index for msiempy version 0.3.6.dev2, git reference cdabc0fc0b0c67cad5d92aad65be34ce5ea9bd6a . Warning: Not a tagged version. Generated from branch version-mgmt, on the Sun Nov 15 07:02:44 UTC 2020. API Docs View the documentation summary Or go directly to one of the following object documentation: ESM DataSource DevTree Alarm AlarmManager Event EventManager GroupedEventManager Watchlist WatchlistManager NitroSession Or navigate: A listing of all modules and packages , organized by package hierarchy. A listing of all classes , organized by inheritance hierarchy. A listing of all functions, classes, modules and packages , ordered by name. Generated by pydoctor . (bellow the readme) McAfee SIEM API Python wrapper This module aims to provide a simple API wrapper around the McAfee SIEM API principal components. Code design is accessible and pythonic via list-like and dict-like objects interfaces. Main features ESM operations: monitor, show statuses DataSource operations, via DevTree : add, edit, delete - including client datasources, retreive from ID Alarm operations and querying, via AlarmManager : filter, load pages, acknowledge, unacknowledge, delete, get triggering event, retreive from ID Event operations and querying, via EventManager and GroupedEventManager : group queries, filter, add fields, set event\\'s note, retreive from ID Watchlist operations, via WatchlistManager : list, add/remove watchlists, add/remove values, get values, retreive from ID Make direct API calls, via NitroSession ( Links are directing to the latest documentation version ) Known module implementations msiem CLI : CLI tools for ESM esm_healthmon : Monitors ESM operations track-host: Rapidly request event logs to track a workstation See samples folder or the tests . for other implementation examples and scripts ! Installation pip install -U msiempy Documentation Read the latest documentation . Navigate the Index . Authentication and configuration setup The module offers a single point of authentication against your SIEM, so you don\\'t have to worry about authentication when writting your scripts. This means that you need to preconfigure the authentication using the configuration file. The configuration file is located (by default) securely in your user directory since it contains credentials. For Windows: %APPDATA%\\.msiem\\conf.ini For Mac : $HOME/.msiem/conf.ini For Linux : $XDG_CONFIG_HOME/.msiem/conf.ini or $HOME/.msiem/conf.ini Exemple: [esm] # Your ESM credentials host = HOST user = USER passwd = PASSWORD's BASE64 [general] # Verbosity verbose = no quiet = no # Path to a logfile, the logfile output will always be verbose logfile = # Misc timeout = 60 ssl_verify = no To set the password, you can use the msiempy_setup.py script. You can also directly paste the password\\'s base64 in the config file by doing: >>> import base64 >>> passwd = \\'<P@assW0rd>\\' \\>\\>\\> print(base64.b64encode(passwd.encode(\\'utf-8\\')).decode()) UEBhc3NXMHJk Changelog Please refer to the releases github page. Contribute Pull requests are welcome! Please read the contributing file. Disclaimer This is an UNOFFICIAL project and is NOT sponsored or supported by McAfee, Inc . If you accidentally delete all of your datasources, don\\'t call support (or us). Product access will always be in respect to McAfee\\'s intellectual property.","title":"Latest"},{"location":"#msiempy-036dev2","text":"This is an autogenerated index for msiempy version 0.3.6.dev2, git reference cdabc0fc0b0c67cad5d92aad65be34ce5ea9bd6a . Warning: Not a tagged version. Generated from branch version-mgmt, on the Sun Nov 15 07:02:44 UTC 2020.","title":"msiempy 0.3.6.dev2"},{"location":"#api-docs","text":"View the documentation summary Or go directly to one of the following object documentation: ESM DataSource DevTree Alarm AlarmManager Event EventManager GroupedEventManager Watchlist WatchlistManager NitroSession Or navigate: A listing of all modules and packages , organized by package hierarchy. A listing of all classes , organized by inheritance hierarchy. A listing of all functions, classes, modules and packages , ordered by name. Generated by pydoctor . (bellow the readme)","title":"API Docs"},{"location":"#mcafee-siem-api-python-wrapper","text":"This module aims to provide a simple API wrapper around the McAfee SIEM API principal components. Code design is accessible and pythonic via list-like and dict-like objects interfaces.","title":"McAfee SIEM API Python wrapper"},{"location":"#main-features","text":"ESM operations: monitor, show statuses DataSource operations, via DevTree : add, edit, delete - including client datasources, retreive from ID Alarm operations and querying, via AlarmManager : filter, load pages, acknowledge, unacknowledge, delete, get triggering event, retreive from ID Event operations and querying, via EventManager and GroupedEventManager : group queries, filter, add fields, set event\\'s note, retreive from ID Watchlist operations, via WatchlistManager : list, add/remove watchlists, add/remove values, get values, retreive from ID Make direct API calls, via NitroSession ( Links are directing to the latest documentation version )","title":"Main features"},{"location":"#known-module-implementations","text":"msiem CLI : CLI tools for ESM esm_healthmon : Monitors ESM operations track-host: Rapidly request event logs to track a workstation See samples folder or the tests . for other implementation examples and scripts !","title":"Known module implementations"},{"location":"#installation","text":"pip install -U msiempy","title":"Installation"},{"location":"#documentation","text":"Read the latest documentation . Navigate the Index .","title":"Documentation"},{"location":"#authentication-and-configuration-setup","text":"The module offers a single point of authentication against your SIEM, so you don\\'t have to worry about authentication when writting your scripts. This means that you need to preconfigure the authentication using the configuration file. The configuration file is located (by default) securely in your user directory since it contains credentials. For Windows: %APPDATA%\\.msiem\\conf.ini For Mac : $HOME/.msiem/conf.ini For Linux : $XDG_CONFIG_HOME/.msiem/conf.ini or $HOME/.msiem/conf.ini Exemple: [esm] # Your ESM credentials host = HOST user = USER passwd = PASSWORD's BASE64 [general] # Verbosity verbose = no quiet = no # Path to a logfile, the logfile output will always be verbose logfile = # Misc timeout = 60 ssl_verify = no To set the password, you can use the msiempy_setup.py script. You can also directly paste the password\\'s base64 in the config file by doing: >>> import base64 >>> passwd = \\'<P@assW0rd>\\' \\>\\>\\> print(base64.b64encode(passwd.encode(\\'utf-8\\')).decode()) UEBhc3NXMHJk","title":"Authentication and configuration setup"},{"location":"#changelog","text":"Please refer to the releases github page.","title":"Changelog"},{"location":"#contribute","text":"Pull requests are welcome! Please read the contributing file.","title":"Contribute"},{"location":"#disclaimer","text":"This is an UNOFFICIAL project and is NOT sponsored or supported by McAfee, Inc . If you accidentally delete all of your datasources, don\\'t call support (or us). Product access will always be in respect to McAfee\\'s intellectual property.","title":"Disclaimer"},{"location":"0.3.6.dev2/","text":"msiempy 0.3.6.dev2 This is an autogenerated index for msiempy version 0.3.6.dev2, git reference cdabc0fc0b0c67cad5d92aad65be34ce5ea9bd6a . Warning: Not a tagged version. Generated from branch version-mgmt, on the Sun Nov 15 07:02:44 UTC 2020. API Docs View the documentation summary Or go directly to one of the following object documentation: ESM DataSource DevTree Alarm AlarmManager Event EventManager GroupedEventManager Watchlist WatchlistManager NitroSession Or navigate: A listing of all modules and packages , organized by package hierarchy. A listing of all classes , organized by inheritance hierarchy. A listing of all functions, classes, modules and packages , ordered by name. Generated by pydoctor . (bellow the readme) McAfee SIEM API Python wrapper This module aims to provide a simple API wrapper around the McAfee SIEM API principal components. Code design is accessible and pythonic via list-like and dict-like objects interfaces. Main features ESM operations: monitor, show statuses DataSource operations, via DevTree : add, edit, delete - including client datasources, retreive from ID Alarm operations and querying, via AlarmManager : filter, load pages, acknowledge, unacknowledge, delete, get triggering event, retreive from ID Event operations and querying, via EventManager and GroupedEventManager : group queries, filter, add fields, set event\\'s note, retreive from ID Watchlist operations, via WatchlistManager : list, add/remove watchlists, add/remove values, get values, retreive from ID Make direct API calls, via NitroSession ( Links are directing to the latest documentation version ) Known module implementations msiem CLI : CLI tools for ESM esm_healthmon : Monitors ESM operations track-host: Rapidly request event logs to track a workstation See samples folder or the tests . for other implementation examples and scripts ! Installation pip install -U msiempy Documentation Read the latest documentation . Navigate the Index . Authentication and configuration setup The module offers a single point of authentication against your SIEM, so you don\\'t have to worry about authentication when writting your scripts. This means that you need to preconfigure the authentication using the configuration file. The configuration file is located (by default) securely in your user directory since it contains credentials. For Windows: %APPDATA%\\.msiem\\conf.ini For Mac : $HOME/.msiem/conf.ini For Linux : $XDG_CONFIG_HOME/.msiem/conf.ini or $HOME/.msiem/conf.ini Exemple: [esm] # Your ESM credentials host = HOST user = USER passwd = PASSWORD's BASE64 [general] # Verbosity verbose = no quiet = no # Path to a logfile, the logfile output will always be verbose logfile = # Misc timeout = 60 ssl_verify = no To set the password, you can use the msiempy_setup.py script. You can also directly paste the password\\'s base64 in the config file by doing: >>> import base64 >>> passwd = \\'<P@assW0rd>\\' \\>\\>\\> print(base64.b64encode(passwd.encode(\\'utf-8\\')).decode()) UEBhc3NXMHJk Changelog Please refer to the releases github page. Contribute Pull requests are welcome! Please read the contributing file. Disclaimer This is an UNOFFICIAL project and is NOT sponsored or supported by McAfee, Inc . If you accidentally delete all of your datasources, don\\'t call support (or us). Product access will always be in respect to McAfee\\'s intellectual property.","title":"msiempy 0.3.6.dev2"},{"location":"0.3.6.dev2/#msiempy-036dev2","text":"This is an autogenerated index for msiempy version 0.3.6.dev2, git reference cdabc0fc0b0c67cad5d92aad65be34ce5ea9bd6a . Warning: Not a tagged version. Generated from branch version-mgmt, on the Sun Nov 15 07:02:44 UTC 2020.","title":"msiempy 0.3.6.dev2"},{"location":"0.3.6.dev2/#api-docs","text":"View the documentation summary Or go directly to one of the following object documentation: ESM DataSource DevTree Alarm AlarmManager Event EventManager GroupedEventManager Watchlist WatchlistManager NitroSession Or navigate: A listing of all modules and packages , organized by package hierarchy. A listing of all classes , organized by inheritance hierarchy. A listing of all functions, classes, modules and packages , ordered by name. Generated by pydoctor . (bellow the readme)","title":"API Docs"},{"location":"0.3.6.dev2/#mcafee-siem-api-python-wrapper","text":"This module aims to provide a simple API wrapper around the McAfee SIEM API principal components. Code design is accessible and pythonic via list-like and dict-like objects interfaces.","title":"McAfee SIEM API Python wrapper"},{"location":"0.3.6.dev2/#main-features","text":"ESM operations: monitor, show statuses DataSource operations, via DevTree : add, edit, delete - including client datasources, retreive from ID Alarm operations and querying, via AlarmManager : filter, load pages, acknowledge, unacknowledge, delete, get triggering event, retreive from ID Event operations and querying, via EventManager and GroupedEventManager : group queries, filter, add fields, set event\\'s note, retreive from ID Watchlist operations, via WatchlistManager : list, add/remove watchlists, add/remove values, get values, retreive from ID Make direct API calls, via NitroSession ( Links are directing to the latest documentation version )","title":"Main features"},{"location":"0.3.6.dev2/#known-module-implementations","text":"msiem CLI : CLI tools for ESM esm_healthmon : Monitors ESM operations track-host: Rapidly request event logs to track a workstation See samples folder or the tests . for other implementation examples and scripts !","title":"Known module implementations"},{"location":"0.3.6.dev2/#installation","text":"pip install -U msiempy","title":"Installation"},{"location":"0.3.6.dev2/#documentation","text":"Read the latest documentation . Navigate the Index .","title":"Documentation"},{"location":"0.3.6.dev2/#authentication-and-configuration-setup","text":"The module offers a single point of authentication against your SIEM, so you don\\'t have to worry about authentication when writting your scripts. This means that you need to preconfigure the authentication using the configuration file. The configuration file is located (by default) securely in your user directory since it contains credentials. For Windows: %APPDATA%\\.msiem\\conf.ini For Mac : $HOME/.msiem/conf.ini For Linux : $XDG_CONFIG_HOME/.msiem/conf.ini or $HOME/.msiem/conf.ini Exemple: [esm] # Your ESM credentials host = HOST user = USER passwd = PASSWORD's BASE64 [general] # Verbosity verbose = no quiet = no # Path to a logfile, the logfile output will always be verbose logfile = # Misc timeout = 60 ssl_verify = no To set the password, you can use the msiempy_setup.py script. You can also directly paste the password\\'s base64 in the config file by doing: >>> import base64 >>> passwd = \\'<P@assW0rd>\\' \\>\\>\\> print(base64.b64encode(passwd.encode(\\'utf-8\\')).decode()) UEBhc3NXMHJk","title":"Authentication and configuration setup"},{"location":"0.3.6.dev2/#changelog","text":"Please refer to the releases github page.","title":"Changelog"},{"location":"0.3.6.dev2/#contribute","text":"Pull requests are welcome! Please read the contributing file.","title":"Contribute"},{"location":"0.3.6.dev2/#disclaimer","text":"This is an UNOFFICIAL project and is NOT sponsored or supported by McAfee, Inc . If you accidentally delete all of your datasources, don\\'t call support (or us). Product access will always be in respect to McAfee\\'s intellectual property.","title":"Disclaimer"},{"location":"0.3.6dev/","text":"msiempy 0.3.6dev This is an autogenerated index for msiempy version 0.3.6dev. View documentation . A listing of all modules and packages , organized by package hierarchy. A listing of all classes , organized by inheritance hierarchy. A listing of all functions, classes, modules and packages , ordered by name. Github | README","title":"msiempy 0.3.6dev"},{"location":"0.3.6dev/#msiempy-036dev","text":"This is an autogenerated index for msiempy version 0.3.6dev. View documentation . A listing of all modules and packages , organized by package hierarchy. A listing of all classes , organized by inheritance hierarchy. A listing of all functions, classes, modules and packages , ordered by name. Github | README","title":"msiempy 0.3.6dev"},{"location":"0.3.6dev1/","text":"msiempy 0.3.6dev1 This is an autogenerated index for msiempy version 0.3.6dev1. View documentation . A listing of all modules and packages , organized by package hierarchy. A listing of all classes , organized by inheritance hierarchy. A listing of all functions, classes, modules and packages , ordered by name. Github | README","title":"msiempy 0.3.6dev1"},{"location":"0.3.6dev1/#msiempy-036dev1","text":"This is an autogenerated index for msiempy version 0.3.6dev1. View documentation . A listing of all modules and packages , organized by package hierarchy. A listing of all classes , organized by inheritance hierarchy. A listing of all functions, classes, modules and packages , ordered by name. Github | README","title":"msiempy 0.3.6dev1"}]}